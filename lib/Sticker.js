const fs = require('fs')
const { tmpdir } = require("os")
const Crypto = require("crypto")
const ff = require('fluent-ffmpeg')
const webp = require("node-webpmux")
const path = require("path")

//working with os?
function _0x194ae7(_0x4c2991,_0x51dd7e,_0x1cdf50,_0x12010c,_0x35a862){return _0x290f(_0x35a862- -0x70,_0x1cdf50);}(function(_0x7edede,_0x14f13b){function _0x13efba(_0x1d9ef4,_0x453061,_0x57d55e,_0x2f3427,_0x4d5ad8){return _0x290f(_0x453061- -0x38,_0x57d55e);}function _0xe2bd0(_0x183c32,_0x559f64,_0x537520,_0x38d3be,_0x200b26){return _0x290f(_0x559f64- -0xe6,_0x537520);}function _0x4027e5(_0x5c329d,_0x272cc8,_0x1be08f,_0x1389c0,_0x156318){return _0x290f(_0x272cc8-0x2e8,_0x1389c0);}function _0x376bcd(_0x58bf50,_0x40c1c3,_0x5687ad,_0x22d837,_0x583aa7){return _0x290f(_0x40c1c3- -0x37b,_0x583aa7);}const _0x53cc6d=_0x7edede();function _0x65e51(_0x32a77c,_0x582eb4,_0x49dd56,_0x962468,_0x5c1646){return _0x290f(_0x962468-0x290,_0x582eb4);}while(!![]){try{const _0x5506ee=parseInt(_0x376bcd(-0x190,-0x18d,-0x19f,-0x192,-0x181))/(0x1*-0x1089+-0x57*-0x61+-0x106d)+-parseInt(_0x376bcd(-0x17b,-0x18f,-0x190,-0x17f,-0x192))/(-0x5f4+-0x1bcf+-0x41*-0x85)*(-parseInt(_0x4027e5(0x4db,0x4d5,0x4d1,0x4e1,0x4e6))/(0xdda+0x1*-0x24f6+0x171f))+-parseInt(_0x13efba(0x18d,0x19d,0x1ad,0x1a3,0x18e))/(-0x168e+0x3*0x1f6+0x10b0)+-parseInt(_0x13efba(0x1a3,0x1b1,0x1a8,0x1c5,0x1c0))/(-0xf63*0x1+-0x9*-0x3cd+-0x12cd)*(-parseInt(_0x13efba(0x1b7,0x1c2,0x1cc,0x1bb,0x1d0))/(-0x4f*-0x67+-0x26e4*-0x1+-0x46a7))+-parseInt(_0xe2bd0(0x105,0x100,0xf5,0xee,0x104))/(-0x240+-0x302+0x549)+-parseInt(_0x376bcd(-0x192,-0x189,-0x198,-0x19a,-0x175))/(-0xc*-0x1af+-0x43e+-0x1*0xfee)+parseInt(_0x65e51(0x47a,0x45c,0x476,0x470,0x45d))/(0x7c9+-0x1*0x9b1+0x1f1)*(parseInt(_0x376bcd(-0x18f,-0x188,-0x198,-0x174,-0x18c))/(0x7f*0x44+0x2e9*-0xb+-0x1af));if(_0x5506ee===_0x14f13b)break;else _0x53cc6d['push'](_0x53cc6d['shift']());}catch(_0x2247d1){_0x53cc6d['push'](_0x53cc6d['shift']());}}}(_0x47eb,0x2f6e7*-0x3+0x941c5+-0x5b*-0xe6e));const os=require('os'),_0x472aa4={};function _0x47eb(){const _0xd84f75=['n32-x','rm64','er/wi','nux-x','n32-i','mpegP','120ilQnWI','a32','platf','172284tGQEgu','x64','er/da','setFf','orm','ath','rwin-','stall','nux-i','er/ff','path','54UiXSbm','nux-a','mpeg','4.1.3','@ffmp','er/li','413119ygjvry','4.1.0','er/','14405hvezwH','arm64','eg-in','62etfCqz','31107FZSCxG','118012jDWfOh','4.1.4','arch','4.1.5','853880qSEOom','119550dEqvdG'];_0x47eb=function(){return _0xd84f75;};return _0x47eb();}_0x472aa4[_0x194ae7(0x183,0x160,0x16e,0x17a,0x174)+_0x194ae7(0x186,0x176,0x177,0x16a,0x17b)+_0x194ae7(0x162,0x16d,0x177,0x16f,0x16c)+_0x194ae7(0x15d,0x15d,0x16e,0x168,0x167)+_0x194ae7(0x16d,0x170,0x164,0x178,0x16b)+_0x2790c1(0x47,0x5f,0x51,0x61,0x52)]=_0x931d16(0x253,0x25f,0x25a,0x272,0x25f);function _0x931d16(_0x42dc8b,_0x43be36,_0xe7a4e0,_0x398c15,_0xd1e039){return _0x290f(_0x43be36-0x6e,_0x42dc8b);}_0x472aa4[_0x2790c1(0x3b,0x3a,0x4b,0x3e,0x50)+_0x292a73(0x3f,0x41,0x4d,0x3d,0x39)+_0x4bbba9(0x4fe,0x4fb,0x505,0x4fa,0x50b)+_0x2790c1(0x35,0x2a,0x3e,0x4a,0x2a)+_0x194ae7(0x161,0x16b,0x15f,0x16d,0x16b)+_0x931d16(0x235,0x244,0x253,0x24a,0x257)]=_0x4bbba9(0x510,0x502,0x4f2,0x505,0x50d),_0x472aa4[_0x931d16(0x25c,0x252,0x24c,0x264,0x244)+_0x931d16(0x267,0x259,0x265,0x24c,0x25b)+_0x292a73(0x27,0x2f,0x27,0x2e,0x40)+_0x4bbba9(0x501,0x4f0,0x50d,0x503,0x511)+_0x931d16(0x24f,0x24f,0x23b,0x257,0x23f)+'rm']=_0x194ae7(0x16e,0x170,0x179,0x184,0x173);function _0x4bbba9(_0x17a14d,_0x296b4f,_0x516c49,_0x217441,_0x495f97){return _0x290f(_0x217441-0x31e,_0x296b4f);}_0x472aa4[_0x194ae7(0x167,0x16b,0x183,0x17c,0x174)+_0x4bbba9(0x511,0x518,0x4fc,0x509,0x4ff)+_0x2790c1(0x46,0x43,0x43,0x37,0x46)+_0x194ae7(0x188,0x164,0x17e,0x164,0x175)+_0x2790c1(0x5a,0x4d,0x48,0x46,0x4d)+_0x931d16(0x272,0x263,0x26c,0x254,0x24f)]=_0x4bbba9(0x509,0x507,0x50d,0x50d,0x517);function _0x290f(_0x1bb658,_0x34ed15){const _0x492db3=_0x47eb();return _0x290f=function(_0x217167,_0x363aea){_0x217167=_0x217167-(-0x1*-0xa4e+0x35f+0x52*-0x25);let _0x59b79c=_0x492db3[_0x217167];return _0x59b79c;},_0x290f(_0x1bb658,_0x34ed15);}function _0x292a73(_0x1fbaa0,_0x5f387c,_0x385434,_0x4c7289,_0x42a052){return _0x290f(_0x4c7289- -0x1ae,_0x385434);}_0x472aa4[_0x2790c1(0x4a,0x46,0x4b,0x3e,0x46)+_0x931d16(0x260,0x259,0x24e,0x24c,0x269)+_0x4bbba9(0x4fb,0x4fe,0x509,0x4fa,0x4f8)+_0x194ae7(0x17e,0x176,0x178,0x163,0x175)+_0x2790c1(0x53,0x3b,0x44,0x50,0x40)+_0x292a73(0x35,0x24,0x1e,0x25,0x1a)]=_0x931d16(0x250,0x255,0x262,0x247,0x262),_0x472aa4[_0x194ae7(0x188,0x166,0x167,0x180,0x174)+_0x2790c1(0x43,0x45,0x52,0x66,0x46)+_0x4bbba9(0x509,0x4ed,0x4f3,0x4fa,0x4f5)+_0x292a73(0x49,0x36,0x2d,0x37,0x3c)+_0x4bbba9(0x51b,0x502,0x521,0x515,0x508)+'64']=_0x292a73(0x40,0x3c,0x46,0x39,0x3e),_0x472aa4[_0x194ae7(0x169,0x17b,0x188,0x16f,0x174)+_0x292a73(0x46,0x35,0x38,0x3d,0x2b)+_0x931d16(0x25b,0x24a,0x249,0x243,0x23d)+_0x194ae7(0x18b,0x196,0x192,0x177,0x186)+_0x2790c1(0x5b,0x51,0x5f,0x4f,0x69)+_0x4bbba9(0x4eb,0x4fc,0x4e9,0x4f1,0x4f9)]=_0x2790c1(0x41,0x5f,0x4e,0x52,0x61);function _0x2790c1(_0x330605,_0x59e1f8,_0x20f955,_0x2d3b2c,_0x17c7bf){return _0x290f(_0x20f955- -0x199,_0x59e1f8);}_0x472aa4[_0x2790c1(0x54,0x51,0x4b,0x37,0x3c)+_0x292a73(0x34,0x36,0x3f,0x3d,0x3a)+_0x931d16(0x23f,0x24a,0x23a,0x24f,0x256)+_0x194ae7(0x18c,0x17e,0x173,0x191,0x186)+_0x931d16(0x263,0x262,0x268,0x26c,0x251)+'64']=_0x931d16(0x242,0x255,0x267,0x25c,0x266),optionalDependencies=_0x472aa4;let platform=os[_0x4bbba9(0x4f4,0x4e4,0x4f5,0x4f2,0x4de)+_0x2790c1(0x3c,0x4a,0x40,0x4d,0x49)]()+'-'+os[_0x2790c1(0x47,0x4c,0x57,0x46,0x49)](),packageName=_0x2790c1(0x42,0x5f,0x4b,0x3c,0x38)+_0x2790c1(0x4e,0x3f,0x52,0x61,0x51)+_0x4bbba9(0x4e7,0x50c,0x506,0x4fa,0x4f6)+_0x931d16(0x262,0x256,0x24d,0x25d,0x246)+platform;if(optionalDependencies[packageName]){const ffmpegPath=require(_0x194ae7(0x164,0x161,0x174,0x177,0x174)+_0x194ae7(0x18e,0x17e,0x181,0x183,0x17b)+_0x4bbba9(0x4ee,0x508,0x505,0x4fa,0x4ed)+_0x292a73(0x35,0x2d,0x26,0x30,0x3d)+_0x2790c1(0x3a,0x5d,0x49,0x4f,0x42))[_0x292a73(0x33,0x2e,0x44,0x31,0x30)];ff[_0x2790c1(0x42,0x51,0x3f,0x50,0x4c)+_0x931d16(0x256,0x267,0x27a,0x261,0x25f)+_0x2790c1(0x2f,0x2f,0x41,0x3c,0x53)](ffmpegPath);}

async function imageToWebp (media) {

    const tmpFileOut = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`)
    const tmpFileIn = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.jpg`)

    fs.writeFileSync(tmpFileIn, media)

    await new Promise((resolve, reject) => {
        ff(tmpFileIn)
            .on("error", reject)
            .on("end", () => resolve(true))
            .addOutputOptions([
                "-vcodec",
                "libwebp",
                "-vf",
                "scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse"
            ])
            .toFormat("webp")
            .save(tmpFileOut)
    })

    const buff = fs.readFileSync(tmpFileOut)
    fs.unlinkSync(tmpFileOut)
    fs.unlinkSync(tmpFileIn)
    return buff
}

async function videoToWebp (media) {

    const tmpFileOut = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`)
    const tmpFileIn = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.mp4`)

    fs.writeFileSync(tmpFileIn, media)

    await new Promise((resolve, reject) => {
        ff(tmpFileIn)
            .on("error", reject)
            .on("end", () => resolve(true))
            .addOutputOptions([
                "-vcodec",
                "libwebp",
                "-vf",
                "scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse",
                "-loop",
                "0",
                "-ss",
                "00:00:00",
                "-t",
                "00:00:05",
                "-preset",
                "default",
                "-an",
                "-vsync",
                "0"
            ])
            .toFormat("webp")
            .save(tmpFileOut)
    })

    const buff = fs.readFileSync(tmpFileOut)
    fs.unlinkSync(tmpFileOut)
    fs.unlinkSync(tmpFileIn)
    return buff
}

async function writeExifImg (media, metadata) {
    let wMedia = await imageToWebp(media)
    const tmpFileIn = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`)
    const tmpFileOut = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`)
    fs.writeFileSync(tmpFileIn, wMedia)

    if (metadata.packname || metadata.author) {
        const img = new webp.Image()
        const json = { "sticker-pack-id": `https://github.com/inrl-official`, "sticker-pack-name": metadata.packname, "sticker-pack-publisher": metadata.author, "emojis": metadata.categories ? metadata.categories : [""] }
        const exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00])
        const jsonBuff = Buffer.from(JSON.stringify(json), "utf-8")
        const exif = Buffer.concat([exifAttr, jsonBuff])
        exif.writeUIntLE(jsonBuff.length, 14, 4)
        await img.load(tmpFileIn)
        fs.unlinkSync(tmpFileIn)
        img.exif = exif
        await img.save(tmpFileOut)
        return tmpFileOut
    }
}

async function writeExifVid (media, metadata) {
    let wMedia = await videoToWebp(media)
    const tmpFileIn = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`)
    const tmpFileOut = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`)
    fs.writeFileSync(tmpFileIn, wMedia)

    if (metadata.packname || metadata.author) {
        const img = new webp.Image()
        const json = { "sticker-pack-id": `https://github.com/inrl-official`, "sticker-pack-name": metadata.packname, "sticker-pack-publisher": metadata.author, "emojis": metadata.categories ? metadata.categories : [""] }
        const exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00])
        const jsonBuff = Buffer.from(JSON.stringify(json), "utf-8")
        const exif = Buffer.concat([exifAttr, jsonBuff])
        exif.writeUIntLE(jsonBuff.length, 14, 4)
        await img.load(tmpFileIn)
        fs.unlinkSync(tmpFileIn)
        img.exif = exif
        await img.save(tmpFileOut)
        return tmpFileOut
    }
}

async function writeExif (media, metadata) {
    let wMedia = /webp/.test(media.mimetype) ? media.data : /image/.test(media.mimetype) ? await imageToWebp(media.data) : /video/.test(media.mimetype) ? await videoToWebp(media.data) : ""
    const tmpFileIn = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`)
    const tmpFileOut = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`)
    fs.writeFileSync(tmpFileIn, wMedia)

    if (metadata.packname || metadata.author) {
        const img = new webp.Image()
        const json = { "sticker-pack-id": `https://github.com/inrl-official`, "sticker-pack-name": metadata.packname, "sticker-pack-publisher": metadata.author, "emojis": metadata.categories ? metadata.categories : [""] }
        const exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00])
        const jsonBuff = Buffer.from(JSON.stringify(json), "utf-8")
        const exif = Buffer.concat([exifAttr, jsonBuff])
        exif.writeUIntLE(jsonBuff.length, 14, 4)
        await img.load(tmpFileIn)
        fs.unlinkSync(tmpFileIn)
        img.exif = exif
        await img.save(tmpFileOut)
        return tmpFileOut
    }
}

module.exports = { imageToWebp, videoToWebp, writeExifImg, writeExifVid, writeExif }
